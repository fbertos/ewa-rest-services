package com.ewa.test;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import java.util.Date;

import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.documentationConfiguration;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.restdocs.JUnitRestDocumentation;
import org.springframework.web.context.WebApplicationContext;

import com.ewa.model.Event;
import com.ewa.model.Location;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.junit.Before;
import org.junit.Rule;

@RunWith(SpringRunner.class)
@SpringBootTest
public class EventControllerTest {
	@Rule
    public JUnitRestDocumentation restDocumentation = new JUnitRestDocumentation();
	
	@Autowired
    private WebApplicationContext context;
	
    private MockMvc mockMvc;
    
    private String sessionId = "";
    private String picture = "";

    @Before
    public void setUp(){
        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.context)
                .apply(documentationConfiguration(this.restDocumentation))
                .build();
    }

    @Test
    public void testPost() throws Exception {
    	ObjectMapper mapper = new ObjectMapper();
        Event event = new Event();
        
        event.setDate(new Date());
        event.setDescription("A description");
        event.setName("An event name");
        event.setAddress(new Location());
        event.getAddress().setLatitud("40.4412031");
        event.getAddress().setLongitud("-3.6953329");
        
        String obj_ev = mapper.writeValueAsString(event);
        
        MockMultipartFile mpicture = new MockMultipartFile("picture", "sample.png", "image/png", picture.getBytes());
        MockMultipartFile mevent = new MockMultipartFile("event", "", "application/json", obj_ev.getBytes());
        
        this.mockMvc.perform(MockMvcRequestBuilders.multipart("/ewa/event")
        		.file(mpicture)
        		.file(mevent)
        		.header("Authorization", sessionId)
        		.header("Content-Type", "application/json"))
            .andExpect(status().isOk())
            .andDo(document("ewa/event/get",
            		responseFields(fieldWithPath("id").description("Generated Event ID"),
            				fieldWithPath("name").description("Event Name"),
            				fieldWithPath("description").description("Event Description"),
            				fieldWithPath("picture").description("Event Picture"),
            				fieldWithPath("ownerId").description("Event Owner ID"),
            				fieldWithPath("date").description("Event Date"),
            				fieldWithPath("status").description("Event Status"),
            				fieldWithPath("address").description("Event Address"))
            		));
    }
}

